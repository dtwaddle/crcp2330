// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/**
 * Implements a graphic square. A graphic square has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Square {

    // Location on the screen
    field int x, y;

    // The size of the square
    field int size;

    /** Constructs a new square with a given location and size. */
    constructor Square new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;

        do draw();

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the square on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        do Screen.drawCircle(256, 128, 100); //middle face
        do Screen.drawCircle(128, 128, 75); //left face
        do Screen.drawCircle(384, 128, 75); //right face
        do Screen.setColor(false); //set colors to white for face decoration
        do Screen.drawCircle(216, 88, 10); //left eye
        do Screen.drawCircle(296, 88, 10); //right eye
        do Screen.drawCircle(256, 128, 15); //nose
        do Screen.drawRectangle(226, 158, 276, 168); //mouth
        do Screen.drawCircle(128, 128, 10); //left face nose
        do Screen.drawRectangle(108, 108, 138, 118); //left face mouth 
        do Screen.drawCircle(384, 128, 10); //right face nose
        do Screen.drawCircle(98, 98, 7); //left face left eye
        do Screen.drawCircle(138, 98, 7); //left face right eye
        


        return;
    }

    /** Erases the square from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Increments the size by 2 pixels. 
    *method void incSize() {
    *    if (((y + size) < 254) & ((x + size) < 510)) {
    *        do erase();
    *        let size = size + 2;
    *        do draw();
    *   }
    *   return;
    *}
    */

    /** Decrements the size by 2 pixels. 
    *method void decSize() {
    *    if (size > 2) {
    *        do erase();
    *        let size = size - 2;
    *        do draw();
    *    }
    *    return;
	*}
    */


    /** Moves up by 2 pixels. */
    method void moveUp() {
        if (y > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
            let y = y - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + 1);
        }
        return;
    }

    /** Moves down by 2 pixels. */
    method void moveDown() {
        if ((y + size) < 254) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + 1);
            let y = y + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
        }
        return;
    }

    /** Moves left by 2 pixels. */
    method void moveLeft() {
        if (x > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
            let x = x - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 1, y + size);
        }
        return;
    }

    /** Moves right by 2 pixels. */
    method void moveRight() {
        if ((x + size) < 510) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + 1, y + size);
            let x = x + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
        }
        return;
    }
}
